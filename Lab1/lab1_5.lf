target C {timeout : 10 sec}



reactor Source(start: time = 100 ms, incr: time = 100 ms){
    output out: string
    state interval: time = start
    logical action a

    reaction(startup) -> a {=
        lf_schedule(a, self-> start);
    =}
    
    reaction(a) -> a, out {=
        instant_t elapsed_logical_time = lf_time_logical_elapsed();
        self -> interval += self -> incr;
        lf_set(out, "hej");
        lf_schedule(a, self->interval);
    =}

}

reactor Sink{
    input in: int

    reaction(in) {=
        printf("%d \n", in -> value);
    =}
}

reactor Stringln{
    preamble {=
        #include <string.h>
    =}
    state total: int = 0
    input in: string
    output out: int

    input in_int: int
    output out_int: int

    reaction(in) -> out {=
        //printf("%s \n", in -> value);
        
        lf_set(out, strlen(in->value));
        self -> total += strlen(in->value);
    =}

    reaction(in_int) -> out_int {=
        lf_set(out_int, in_int -> value);
    =}

    reaction(shutdown){=
        printf("%d \n", self -> total);
    =}
}

main reactor{
    preamble {=
        #include <string.h>
    =}
    Source = new Source()
    Sink = new Sink()
    Stringln = new Stringln()
    Source.out -> Stringln.in
    Stringln.out -> Sink.in
    Stringln.out_int -> Stringln.in_int after 0;
}
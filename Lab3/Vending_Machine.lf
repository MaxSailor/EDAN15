target C

import Output, Input from "vm_extra.lf"

reactor Machine(stock: int[] = {2, 2, 2}) {
  preamble {=
    #include <string.h>
    enum machine_mode {
        Idle = 0,
        Selected = 1,
        Payed = 2
    };
    char buf[100];
  =}
  input cancel: bool
  input sel: int
  input coin: bool

  input display_off: int

  output change: bool
  output beverage: int
  output text: string

  state Machine_mode: int = 0
  state bev: int = 0
  state display_on: bool = true

  logical action a

  initial mode Off {
    reaction(coin, sel, cancel) -> text, reset(On) {=
      lf_set_mode(On);
      sprintf(buf, "Powering on.\n");
      lf_set(text, buf);
    =}
  }

  mode On {
    reaction(coin, sel, cancel) -> change, beverage, text {=
      if(coin -> is_present){
      //printf("[DEBUG] Coin detected. State: %d \n", self -> Machine_mode);
          switch(self -> Machine_mode) {
              case Idle:
                  self -> Machine_mode = Payed;
                  sprintf(buf,"Coin recieved. Please make a selection.\n");
                  lf_set(text, buf);
                  break;
              case Selected:
                  if(self -> stock[self  -> bev] != 0){
                      lf_set(beverage, self -> bev);
                      self -> stock[self  -> bev]--;
                      self -> Machine_mode = Idle;
                      sprintf(buf, "Coin recieved. Please take your beverage.\n");
                      lf_set(text, buf);
                  }else{
                      self -> Machine_mode = Selected;
                      sprintf(buf, "Coin recieved. There are no more of that bevereage, please choose something else.\n");
                      lf_set(text, buf);
                  }

                  break;
              case Payed:
                  lf_set(change, true);
                  self -> Machine_mode = Payed;
                  sprintf(buf,"Coin recieved. Coin already in machine. Please pick up change.\n");
                  lf_set(text, buf);
                  break;
          }
      }

      if(sel -> is_present){
          //printf("[DEBUG] Selection detected. State: %d \n", self -> Machine_mode);
          switch(self -> Machine_mode) {
              case Idle:
                  if(sel -> value <= 2 && sel -> value >= 0){
                      self -> Machine_mode = Selected;
                      self -> bev = sel -> value;
                      sprintf(buf, "Selection made : %d. Please put in a coin. \n", sel -> value);
                      lf_set(text, buf);
                  }else{
                      self -> Machine_mode = Idle;
                      sprintf(buf, "Not a viable selection. Please select again.\n");
                      lf_set(text, buf);
                  }
                  break;
              case Selected:
                  if(sel -> value <= 2 && sel -> value >= 0){
                      self -> Machine_mode = Selected;
                      self -> bev = sel -> value;
                      sprintf(buf, "Selection changed : %d. Please put in a coin. \n", sel -> value);
                      lf_set(text, buf);
                  }else{
                      self -> Machine_mode = Idle;
                      sprintf(buf, "Not a viable selection. Please select again.\n");
                      lf_set(text, buf);
                  }
                  break;
              case Payed:
                  if(sel -> value <= 2 && sel -> value >= 0){
                      if(self -> stock[sel -> value] != 0){
                          lf_set(beverage, sel -> value);
                          self -> stock[sel  -> value]--;
                          self -> Machine_mode = Idle;
                          self -> bev = 0;
                          sprintf(buf, "Selection made : %d. Please pick up your beverage. \n", sel -> value);
                          lf_set(text, buf);
                      }else{
                          self -> Machine_mode = Payed;
                          sprintf(buf, "Beverage out of stock. Please select again. \n");
                          lf_set(text, buf);
                      }
                  }else{
                      self -> Machine_mode = Payed;
                      sprintf(buf, "Not a viable selection. Please select again. \n");
                      lf_set(text, buf);
                  }
                  break;
          }

      }

      if(cancel -> is_present){
      //printf("[DEBUG] Cancellation detected. State: %d \n", self -> Machine_mode);
      switch(self -> Machine_mode) {
              case Idle:
                  self -> Machine_mode = Idle;
                  break;
              case Selected:
                  self -> Machine_mode = Idle;
                  self -> bev = 0;
                  sprintf(buf, "Purchase canceled. \n");
                  lf_set(text, buf);
                  break;
              case Payed:
                  lf_set(change, true);
                  sprintf(buf, "Purchase canceled. Please pick up change.\n");
                  lf_set(text, buf);
                  self -> Machine_mode = Idle;
                  break;
          }
      }
    =}

    reaction(display_off) -> change, a{=
      lf_schedule(a, SECS(60));
      if(self -> Machine_mode == Payed){
          lf_set(change, true);
          self -> Machine_mode = 0;
      }
    =}
    
    reaction(a) -> Off, text{=
        lf_set_mode(Off);
        sprintf(buf, "Powering down. \n");
        lf_set(text, buf);
    =}
  }
}

reactor Display {
  preamble {=
    #include <string.h>
  =}
  input text: string
  output display_off: int
  timer t(0, 100 ms)
  state count: int = 0
  state display_on: bool = false

  reaction(text) {=
    printf("[DISPLAY] %s", text -> value);
    self -> count = 0;
    self -> display_on = true;
  =}

  reaction(t) -> display_off {=
    if(self -> count >= 50){
        if(self -> display_on){
            printf("[DISPLAY] Display off. \n");
            self -> display_on = false;
            lf_set(display_off, 0);
        }
        self -> count = 0;
    }else{
        self -> count++;
    }
  =}
}

main reactor {
  Input = new Input()
  Output = new Output()
  Machine = new Machine()
  Display = new Display()

  Input.cancel -> Machine.cancel
  Input.sel -> Machine.sel
  Input.coin -> Machine.coin
  Machine.change -> Output.change
  Machine.beverage -> Output.beverage
  Machine.text -> Display.text
  Display.display_off -> Machine.display_off after 0
}
